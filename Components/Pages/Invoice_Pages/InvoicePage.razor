@page "/invoicesPage"
@rendermode InteractiveServer
@using Client_Invoice_System.Helpers
@using Client_Invoice_System.Models
@using Client_Invoice_System.Repository
@using Client_Invoice_System.Services
@using Client_Invoice_System.Components
@inject InvoiceService InvoiceService
@inject ClientRepository ClientRepo
@inject IJSRuntime JS
@inject IPaginationService<Invoice> PaginationService

<div class="d-flex align-items-center">
    <Breadcrumb />
</div>
<h3 class="mb-4 fw-bold">Invoice Management</h3>

<!-- Client Selection and Generate Invoice Button -->
<!-- Filter Section: Client Selection, Date Range, and Generate Invoice -->
<div class="row align-items-end mb-3">
    <!-- Client Selection -->
    <div class="col-lg-3 col-md-4 col-sm-6">
        <label for="clientSelect">Client</label>
        <select class="form-control" id="clientSelect" @bind="SelectedClientId">
            <option value="">-- Select Client --</option>
            @foreach (var client in Clients)
            {
                <option value="@client.ClientId">
                    @client.Name (@(client.CountryCurrency?.Symbol ?? client.CustomCurrency))
                </option>
            }
        </select>
    </div>

    <!-- Start Date -->
    <div class="col-lg-2 col-md-2 col-sm-6">
        <label for="startDate">Start Date</label>
        <InputDate @bind-Value="StartDate" class="form-control w-35 " />
    </div>

    <!-- End Date -->
    <div class="col-lg-2 col-md-2 col-sm-6">
        <label for="endDate">End Date</label>
        <InputDate @bind-Value="EndDate" class="form-control w-35" />
    </div>

    <!-- Generate Invoice Button -->
    <div class="col-lg-3 col-md-2 col-sm-6">
        <button class="btn btn-primary w-30 mt-4" @onclick="GenerateInvoice">
            Generate Invoice
        </button>
    </div>
</div>


<!-- Invoice Table -->
<div class="card p-3 shadow-lg rounded-4 bg-white">
    <!-- Search and Filter Controls -->
    <div class="row mb-3 align-items-center">
        <div class="col-12 col-md-6">
            <h4 class="mb-3 fw-bold">Existing Invoices</h4>
        </div>
        <div class="col-12 col-md-6">
            <div class="d-flex flex-wrap justify-content-end gap-2">
                <select class="form-control w-auto" @onchange="GetInvoiceByStatus">
                    <option value="">All</option>
                    <option value="true">Paid</option>
                    <option value="Partial">Partially Paid</option>
                    <option value="Unpaid">Unpaid</option>
                </select>
                <select class="form-control w-auto" @onchange="GetInvoiceByEmailStatus">
                    <option value="">All</option>
                    <option value="Sent">Sent</option>
                    <option value="Not Sent">Not Sent</option>
                </select>
                <div class="input-group shadow rounded" style="max-width: 300px;">
                    <input type="text" class="form-control form-control-sm border-primary rounded-start" placeholder="🔍 Search..." @bind="searchQuery" @oninput="FilterInvoices" />
                    <button class="btn btn-primary fw-bold px-3" @onclick="FilterInvoices">
                        <i class="bi bi-search"></i>
                    </button>
                </div>
            </div>
        </div>
    </div>

    @if (pagedInvoices != null && pagedInvoices.Any())
    {
        <div class="table-responsive div-responsive">
            <table class="table table-striped">
                <thead>
                    <tr>
                        <th>Client</th>
                        <th>Invoice Date</th>
                        <th>Total Amount</th>
                        <th>Paid Amount</th>
                        <th>Remaining Amount</th>
                        <th>Currency</th>
                        <th>Status</th>
                        <th>Email Status</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var invoice in pagedInvoices)
                    {
                        <tr>
                            <td>@(invoice.Client?.Name ?? "Unknown")</td>
                            <td>@invoice.InvoiceDate.ToShortDateString()</td>
                            <td>@(invoice.CountryCurrency?.Symbol) @invoice.TotalAmount.ToString("N2")</td>
                            <td>@(invoice.CountryCurrency?.Symbol) @invoice.PaidAmount.ToString("N2")</td>
                            <td>@(invoice.CountryCurrency?.Symbol) @invoice.RemainingAmount.ToString("N2")</td>
                            <td>@(invoice.CountryCurrency?.CurrencyName)</td>
                            <td>
                                <span class="badge @(invoice.InvoiceStatuses == InvoiceStatus.Paid ? "bg-success" : invoice.InvoiceStatuses == InvoiceStatus.PartiallyPaid ? "bg-warning" : "bg-danger")">
                                    @(invoice.InvoiceStatuses == InvoiceStatus.Paid ? "Paid" : invoice.InvoiceStatuses == InvoiceStatus.PartiallyPaid ? "Partially Paid" : "Unpaid")
                                </span>
                            </td>
                            <td>
                                <span class="badge @(invoice.EmailStatus == "Sent" ? "bg-primary" : "bg-warning")">
                                    @invoice.EmailStatus
                                </span>
                            </td>
                            <td class="nowrap">
                                <button class="btn btn-sm btn-primary me-2" @onclick="() => DownloadInvoice(invoice.ClientId)">
                                    <i class="bi bi-download"></i> Download
                                </button>
                                <button class="btn btn-sm btn-success me-2" @onclick="() => ShowSendEmailModal(invoice.ClientId, invoice.Client?.Name)">
                                    <i class="bi bi-envelope"></i> Send Email
                                </button>
                                <button class="btn btn-sm btn-warning me-2" @onclick="() => ShowMarkAsPaidModal(invoice.InvoiceId, invoice.Client?.Name)" disabled="@(invoice.InvoiceStatuses == InvoiceStatus.Paid)">
                                    <i class="bi bi-cash-stack"></i> Mark as Paid
                                </button>
                                <button class="btn btn-sm btn-danger" @onclick="() => ShowDeleteInvoiceModal(invoice.InvoiceId, invoice.Client?.Name)">
                                    <i class="bi bi-trash"></i> Delete
                                </button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>

        <!-- Pagination Controls -->
        <div class="d-flex align-items-center justify-content-center mt-3">
            <ul class="pagination mb-0">
                <li class="page-item @(CanGoPrevious ? "" : "disabled")">
                    <a class="page-link shadow-sm" href="javascript:void(0);" @onclick="PreviousPage">«</a>
                </li>
                @for (int i = 1; i <= totalPages; i++)
                {
                    <li class="page-item @(i == currentPage ? "active" : "")">
                        <a class="page-link fw-bold shadow-sm" href="javascript:void(0);" @onclick="() => ChangePage(i)">@i</a>
                    </li>
                }
                <li class="page-item @(CanGoNext ? "" : "disabled")">
                    <a class="page-link shadow-sm" href="javascript:void(0);" @onclick="NextPage">»</a>
                </li>
            </ul>
            <div class="d-flex align-items-center ms-3">
                <select class="form-select w-auto text-center shadow-sm border-primary" @onchange="SetPageSize">
                    @foreach (var size in new int[] { 5, 10, 15, 20, 50, 100 })
                    {
                        <option value="@size" selected="@(size == pageSize)">Show @size</option>
                    }
                </select>
            </div>
        </div>
    }
    else
    {
        <p class="text-center text-muted">No invoices found.</p>
    }
</div>
@if (isMarkAsPaidModalVisible)
{
    <div class="modal-overlay">
        <div class="delete-modal">
            <p class="fw-bold text-center">
                Mark invoice for <span class="text-success">@modalClientName</span> as Paid?
            </p>

            <!-- Total Amount -->
            <div class="mb-3">
                <label class="form-label fw-bold">Total Amount:</label>
                <input type="number" class="form-control" value="@TotalAmount" disabled />
            </div>

            <!-- Paid Amount -->
            <div class="mb-3">
                <label class="form-label fw-bold">Paid Amount:</label>
                <input type="number" class="form-control" @bind="PaymentAmount" step="0.01" />
            </div>

            <!-- Remaining Amount (Auto-calculated) -->
            <div class="mb-3">
                <label class="form-label fw-bold">Remaining Amount:</label>
                <input type="number" class="form-control" value="@RemainingAmount" disabled />
            </div>

            @if (!string.IsNullOrEmpty(MarkAsPaidErrorMessage))
            {
                <div class="alert alert-danger">@MarkAsPaidErrorMessage</div>
            }

            <div class="d-flex justify-content-center gap-3">
                <button class="btn btn-warning d-flex align-items-center" @onclick="ConfirmMarkAsPaid">
                    <i class="bi bi-cash-stack me-1"></i> Yes, Mark as Paid
                </button>
                <button class="btn btn-secondary d-flex align-items-center" @onclick="CancelMarkAsPaid">
                    <i class="bi bi-x-circle me-1"></i> Cancel
                </button>
            </div>
        </div>
    </div>
}

<!-- Send Email Confirmation Modal -->
@if (isSendEmailModalVisible)
{
    <div class="modal-overlay">
        <div class="delete-modal">
            <p class="fw-bold">Are you sure you want to send an email to <span class="text-primary">@modalClientName</span>?</p>
            <div class="d-flex justify-content-center gap-3">
                <button class="btn btn-success" @onclick="ConfirmSendEmail">
                    <i class="bi bi-envelope-check me-1"></i> Yes, Send
                </button>
                <button class="btn btn-secondary" @onclick="CancelSendEmail">
                    <i class="bi bi-x-circle me-1"></i> Cancel
                </button>
            </div>
        </div>
    </div>
}

@* <!-- Mark as Paid Confirmation Modal --> *@
@* @if (isMarkAsPaidModalVisible) *@
@* { *@
@*     <div class="modal-overlay"> *@
@*         <div class="delete-modal"> *@
@*             <p class="fw-bold">Mark invoice for <span class="text-success">@modalClientName</span> as Paid?</p> *@
@*             <div class="d-flex justify-content-center gap-3"> *@
@*                 <button class="btn btn-warning" @onclick="ConfirmMarkAsPaid"> *@
@*                     <i class="bi bi-cash-stack me-1"></i> Yes, Mark as Paid *@
@*                 </button> *@
@*                 <button class="btn btn-secondary" @onclick="CancelMarkAsPaid"> *@
@*                     <i class="bi bi-x-circle me-1"></i> Cancel *@
@*                 </button> *@
@*             </div> *@
@*         </div> *@
@*     </div> *@
@* } *@

<!-- Delete Invoice Confirmation Modal -->
@if (isDeleteInvoiceModalVisible)
{
    <div class="modal-overlay">
        <div class="delete-modal">
            <p class="fw-bold">Are you sure you want to delete the invoice for <span class="text-danger">@modalClientName</span>?</p>
            <div class="d-flex justify-content-center gap-3">
                <button class="btn btn-danger" @onclick="ConfirmDeleteInvoice">
                    <i class="bi bi-trash me-1"></i> Yes, Delete
                </button>
                <button class="btn btn-secondary" @onclick="CancelDeleteInvoice">
                    <i class="bi bi-x-circle me-1"></i> Cancel
                </button>
            </div>
        </div>
    </div>
}

<style>
    .container {
        max-width: 1200px;
    }

    .table-responsive {
        overflow-x: auto;
        min-width: 100%;
        display: block;
        white-space: nowrap;
    }

    .div-responsive {
        max-width: calc(100vw - 350px);
    }

    th, td {
        min-width: 150px;
    }

        td.nowrap {
            white-space: nowrap;
        }

    .modal-overlay {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        display: flex;
        justify-content: center;
        align-items: center;
        background: rgba(0, 0, 0, 0.4);
        z-index: 1050;
    }

    .delete-modal {
        background: white;
        padding: 20px;
        border-radius: 8px;
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.2);
        text-align: center;
        max-width: 400px;
    }

    .btn-sm {
        min-width: 70px;
    }

    tbody td {
        text-align: center;
        vertical-align: middle;
    }

    thead th {
        text-align: center;
    }
</style>
@code {
    private List<Client> Clients = new();
    private List<Invoice> Invoices = new();
    private List<Invoice> filteredInvoices = new();
    private List<Invoice> pagedInvoices = new();
    private List<Invoice> AllInvoices = new();

    private int SelectedClientId;
    private string SelectedStatus = "";
    private string SelectedEmailStatus = "";
    private string searchQuery = "";
    private object datePickerControl = new();
    private int pageSize = 5;
    private int currentPage = 1;
    private int totalPages = 1;

    // Modal State Variables
    private bool isMarkAsPaidModalVisible = false;
    private bool isSendEmailModalVisible = false;
    private bool isDeleteInvoiceModalVisible = false;
    private string modalClientName = string.Empty;
    private string MarkAsPaidErrorMessage = string.Empty;

    private int selectedPageSize = 5;
    private bool CanGoPrevious => currentPage > 1;
    private bool CanGoNext => currentPage < totalPages;

    // Change StartDate and EndDate to nullable so they're optional.
    private DateTime? StartDate { get; set; } = null; // No date selected initially.
    private DateTime? EndDate { get; set; } = null;

    private int modalInvoiceId;
    private int modalClientId;
    private decimal TotalAmount { get; set; } = 0;
    private decimal PaymentAmount { get; set; } = 0;
    private decimal RemainingAmount => TotalAmount - PaymentAmount;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            Clients = (await ClientRepo.GetAllAsync(true)).ToList();
            AllInvoices = (await InvoiceService.GetAllInvoicesAsync()).ToList();
            Invoices = new List<Invoice>(AllInvoices);
            PaginationService.SetPageSize(selectedPageSize);
            await LoadInvoices();
            FilterInvoices();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading invoices: {ex.Message}");
        }
    }



    // private async Task GenerateInvoice()
    // {
    //     try
    //     {
    //         if (SelectedClientId <= 0) return;

    //         var existingInvoice = await InvoiceService.GetUnpaidInvoiceForClientAsync(SelectedClientId);
    //         if (existingInvoice != null)
    //         {
    //             existingInvoice.TotalAmount += await InvoiceService.CalculateAdditionalAmountAsync(SelectedClientId);
    //             await InvoiceService.UpdateInvoiceAsync(existingInvoice);
    //         }
    //         else
    //         {
    //             await InvoiceService.CreateInvoiceAsync(SelectedClientId);
    //         }

    //         Invoices = (await InvoiceService.GetAllInvoicesAsync()).ToList();
    //         FilterInvoices();
    //     }
    //     catch (Exception ex)
    //     {
    //         Console.WriteLine($"Error generating invoice: {ex.Message}");
    //     }
    // }
    private async Task GenerateInvoice()
    {
        try
        {
            if (SelectedClientId <= 0) return;

            var newInvoiceIds = await InvoiceService.SaveInvoiceAsync(SelectedClientId);

            if (newInvoiceIds.Any())
            {
                Console.WriteLine($"✅ Generated {newInvoiceIds.Count} new invoices for Client {SelectedClientId}.");
            }
            else
            {
                Console.WriteLine($"⚠️ No new invoices generated for Client {SelectedClientId}.");
            }

            Invoices = (await InvoiceService.GetAllInvoicesAsync()).ToList();
            FilterInvoices();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"❌ Error generating invoice: {ex.Message}");
        }
    }


    private async Task DownloadInvoice(int clientId)
    {
        try
        {
            if (clientId <= 0) return;

            byte[] pdfData = await InvoiceService.GenerateInvoicePdfAsync(clientId, StartDate, EndDate);
            var fileName = $"Invoice_{clientId}.pdf";
            await JS.InvokeVoidAsync("downloadFileFromStream", fileName, new DotNetStreamReference(new MemoryStream(pdfData)), "application/pdf");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error downloading invoice: {ex.Message}");
        }
    }

    private void ShowSendEmailModal(int clientId, string clientName)
    {
        modalClientId = clientId;
        modalClientName = clientName;
        isSendEmailModalVisible = true;
    }

    private async Task ConfirmSendEmail()
    {
        try
        {
            bool emailSent = await InvoiceService.SendInvoiceToClientAsync(modalClientId, StartDate, EndDate);
            Console.WriteLine(emailSent ? "📧 Invoice email sent successfully." : "❌ Failed to send invoice email.");

            Invoices = (await InvoiceService.GetAllInvoicesAsync()).ToList();
            FilterInvoices();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"❌ Error sending invoice: {ex.Message}");
        }
        finally
        {
            isSendEmailModalVisible = false;
        }
    }

    private void ShowMarkAsPaidModal(int invoiceId, string clientName)
    {
        var invoice = Invoices.FirstOrDefault(i => i.InvoiceId == invoiceId);
        if (invoice != null)
        {
            modalInvoiceId = invoice.InvoiceId;
            modalClientName = clientName;

            // Check if there is a remaining balance
            decimal remainingAmount = invoice.TotalAmount - invoice.PaidAmount;

            // If a partial payment exists, set TotalAmount to the remaining amount
            TotalAmount = remainingAmount > 0 ? remainingAmount : invoice.TotalAmount;

            PaymentAmount = 0; // Reset payment input
            MarkAsPaidErrorMessage = string.Empty;
        }
        else
        {
            TotalAmount = 0;
            PaymentAmount = 0;
            MarkAsPaidErrorMessage = string.Empty;
        }

        isMarkAsPaidModalVisible = true;
    }


    private async Task ConfirmMarkAsPaid()
    {
        try
        {
            // Validation: Payment amount must be positive.
            if (PaymentAmount <= 0)
            {
                MarkAsPaidErrorMessage = "Paid Amount must be greater than 0.";
                return;
            }

            // Validation: Payment amount must not exceed total amount.
            if (PaymentAmount > TotalAmount)
            {
                MarkAsPaidErrorMessage = "Paid Amount cannot exceed Total Amount.";
                return;
            }

            // If validations pass, mark invoice as paid.
            await InvoiceService.MarkInvoiceAsPaidAsync(modalInvoiceId, PaymentAmount);

            // Refresh the invoice list.
            Invoices = (await InvoiceService.GetAllInvoicesAsync()).ToList();
            FilterInvoices();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error marking invoice as paid: {ex.Message}");
            MarkAsPaidErrorMessage = $"Error: {ex.Message}";
            return; // Do not close modal if error occurs.
        }
        finally
        {
            // Only close the modal if there is no error.
            if (string.IsNullOrEmpty(MarkAsPaidErrorMessage))
            {
                isMarkAsPaidModalVisible = false;
                PaymentAmount = 0; // Reset input.
            }
            // else{
            //     isMarkAsPaidModalVisible = false;
            // }
        }
    }
    private void CancelMarkAsPaid()
    {
        isMarkAsPaidModalVisible = false;
        PaymentAmount = 0;
        MarkAsPaidErrorMessage = string.Empty;
    }

    private void ShowDeleteInvoiceModal(int invoiceId, string clientName)
    {
        modalInvoiceId = invoiceId;
        modalClientName = clientName;
        isDeleteInvoiceModalVisible = true;
    }

    private async Task ConfirmDeleteInvoice()
    {
        try
        {
            await InvoiceService.DeleteInvoiceAsync(modalInvoiceId);
            Invoices = (await InvoiceService.GetAllInvoicesAsync()).ToList();
            FilterInvoices();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error deleting invoice: {ex.Message}");
        }
        finally
        {
            isDeleteInvoiceModalVisible = false;
        }
    }

    private async Task FilterInvoices()
    {
        filteredInvoices = string.IsNullOrWhiteSpace(searchQuery)
            ? new List<Invoice>(Invoices)
            : Invoices.Where(i =>
                (i.Client?.Name?.Contains(searchQuery, StringComparison.OrdinalIgnoreCase) ?? false) ||
                i.InvoiceId.ToString().Contains(searchQuery) ||
                i.InvoiceDate.ToString("yyyy-MM-dd").Contains(searchQuery) ||
                i.TotalAmount.ToString("F2").Contains(searchQuery) ||
                i.PaidAmount.ToString("F2").Contains(searchQuery) ||
                i.RemainingAmount.ToString("F2").Contains(searchQuery) ||
                i.InvoiceStatuses.ToString().Contains(searchQuery, StringComparison.OrdinalIgnoreCase) ||
                i.EmailStatus.Contains(searchQuery, StringComparison.OrdinalIgnoreCase)).ToList();

        currentPage = 1;
        await LoadInvoices();
    }

    private async Task LoadInvoices()
    {
        var result = await PaginationService.GetPagedDataAsync(filteredInvoices.AsQueryable(), currentPage);
        pagedInvoices = result.PagedData;
        totalPages = result.TotalPages;
    }

    private async Task SetPageSize(ChangeEventArgs e)
    {
        selectedPageSize = Convert.ToInt32(e.Value);
        PaginationService.SetPageSize(selectedPageSize);
        currentPage = 1;
        await LoadInvoices();
    }

    private async Task ChangePage(int page)
    {
        if (page >= 1 && page <= totalPages)
        {
            currentPage = page;
            await LoadInvoices();
        }
    }

    private async Task GetInvoiceByStatus(ChangeEventArgs e)
    {
        SelectedStatus = e.Value?.ToString();
        ApplyFilters();
    }

    private async Task GetInvoiceByEmailStatus(ChangeEventArgs e)
    {
        SelectedEmailStatus = e.Value?.ToString();
        ApplyFilters();
    }

    private void ApplyFilters()
    {
        bool? statusFilter = bool.TryParse(SelectedStatus, out bool parsedStatus) ? parsedStatus : (bool?)null;

        Invoices = AllInvoices
            .Where(i => (!statusFilter.HasValue || i.IsPaid == statusFilter.Value) &&
                        (string.IsNullOrEmpty(SelectedEmailStatus) || i.EmailStatus == SelectedEmailStatus))
            .ToList();

        FilterInvoices();
    }

    private void PreviousPage()
    {
        if (currentPage > 1)
        {
            currentPage--;
            LoadInvoices();
        }
    }

    private void NextPage()
    {
        if (currentPage < totalPages)
        {
            currentPage++;
            LoadInvoices();
        }
    }

  
  

    private void CancelSendEmail()
    {
        isSendEmailModalVisible = false;
    }

    private void CancelDeleteInvoice()
    {
        isDeleteInvoiceModalVisible = false;
    }
    private void OnStartDateChanged(DateTime newStartDate)
    {
        StartDate = newStartDate;
        // Optionally, call a method to filter your data based on the new start date.
    }

    private void OnEndDateChanged(DateTime newEndDate)
    {
        EndDate = newEndDate;
        // Optionally, call a method to filter your data based on the new end date.
    }

   
}
