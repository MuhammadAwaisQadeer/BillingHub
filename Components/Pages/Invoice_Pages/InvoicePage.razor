@page "/invoicesPage"
@rendermode InteractiveServer
@using Client_Invoice_System.Models
@using Client_Invoice_System.Repository
@using Client_Invoice_System.Services
@using Client_Invoice_System.Components
@inject InvoiceService InvoiceService
@inject ClientRepository ClientRepo
@inject IJSRuntime JS

<div class="d-flex align-items-center">
    <Breadcrumb />
</div>
<h3 class="mb-4 fw-bold">Invoice Management</h3>

<!-- Client Selection and Generate Invoice Button -->
<div class="d-flex align-items-center gap-2 mb-3">
    <select class="form-control w-25" @bind="SelectedClientId">
        <option value="">-- Select Client --</option>
        @foreach (var client in Clients)
        {
            <option value="@client.ClientId">
                @client.Name (@(client.CountryCurrency?.Symbol ?? client.CustomCurrency))
            </option>
        }
    </select>
    <button class="btn btn-primary" @onclick="GenerateInvoice">Generate Invoice</button>
</div>

<!-- Date Range Filters using Bootstrap CDatePicker components --> 
 <div class="row mb-3"> 
     <FormColumn sm="12" md="4" lg="3" xl="3"> 
      <CDatePicker control="@datePickerControl" name="startDate" isEnable="true"
    placeholder="Enter start date" label="Start Date"
    Value="@StartDate" ValueChanged="OnStartDateChanged" />
     </FormColumn> 
     <FormColumn sm="12" md="4" lg="3" xl="3"> 
        <CDatePicker control="@datePickerControl" name="endDate" isEnable="true"
    placeholder="Enter end date" label="End Date"
    Value="@EndDate" ValueChanged="OnEndDateChanged" />
     </FormColumn> 
 </div>

<!-- Invoice Table -->
<div class="card p-3 shadow-lg rounded-4 bg-white">
    <!-- Search and Filter Controls -->
    <div class="row mb-3 align-items-center">
        <div class="col-12 col-md-6">
            <h4 class="mb-3 fw-bold">Existing Invoices</h4>
        </div>
        <div class="col-12 col-md-6">
            <div class="d-flex flex-wrap justify-content-end gap-2">
                <select class="form-control w-auto" @onchange="GetInvoiceByStatus">
                    <option value="">All</option>
                    <option value="true">Paid</option>
                    <option value="false">Unpaid</option>
                </select>
                <select class="form-control w-auto" @onchange="GetInvoiceByEmailStatus">
                    <option value="">All</option>
                    <option value="Sent">Sent</option>
                    <option value="Not Sent">Not Sent</option>
                </select>
                <div class="input-group shadow rounded" style="max-width: 300px;">
                    <input type="text" class="form-control form-control-sm border-primary rounded-start" placeholder="🔍 Search..." @bind="searchQuery" @oninput="FilterInvoices" />
                    <button class="btn btn-primary fw-bold px-3" @onclick="FilterInvoices">
                        <i class="bi bi-search"></i>
                    </button>
                </div>
            </div>
        </div>
    </div>

    @if (pagedInvoices != null && pagedInvoices.Any())
    {
        <div class="table-responsive div-responsive">
            <table class="table table-striped">
                <thead>
                    <tr>
                        <th><i class="bi bi-person"></i> Client</th>
                        <th><i class="bi bi-calendar"></i> Invoice Date</th>
                        <th><i class="bi bi-currency-dollar"></i> Total Amount</th>
                        <th><i class="bi bi-currency-exchange"></i> Currency</th>
                        <th><i class="bi bi-info-circle"></i> Status</th>
                        <th><i class="bi bi-envelope"></i> Email Status</th>
                        <th><i class="bi bi-gear"></i> Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var invoice in pagedInvoices)
                    {
                        <tr>
                            <td>@(invoice.Client?.Name ?? "Unknown")</td>
                            <td>@invoice.InvoiceDate.ToShortDateString()</td>
                            <td>@(invoice.CountryCurrency?.Symbol) @invoice.TotalAmount.ToString("N2")</td>
                            <td>@(invoice.CountryCurrency?.CurrencyName)</td>
                            <td>
                                <span class="badge @(invoice.InvoiceStatuses == InvoiceStatus.Paid ? "bg-success" : "bg-danger")">
                                    @(invoice.InvoiceStatuses == InvoiceStatus.Paid ? "Paid" : "Unpaid")
                                </span>
                            </td>
                            <td>
                                <span class="badge @(invoice.EmailStatus == "Sent" ? "bg-primary" : "bg-warning")">
                                    @invoice.EmailStatus
                                </span>
                            </td>
                            <td class="nowrap">
                                <button class="btn btn-sm btn-primary me-2" @onclick="() => DownloadInvoice(invoice.ClientId)">
                                    <i class="bi bi-download me-1"></i> Download
                                </button>
                                <button class="btn btn-sm btn-success me-2" @onclick="() => ShowSendEmailModal(invoice.ClientId, invoice.Client?.Name)">
                                    <i class="bi bi-envelope me-1"></i> Send Email
                                </button>
                                <button class="btn btn-sm btn-warning me-2" @onclick="() => ShowMarkAsPaidModal(invoice.InvoiceId, invoice.Client?.Name)" disabled="@((invoice.InvoiceStatuses == InvoiceStatus.Paid))">
                                    <i class="bi bi-cash-stack me-1"></i> Mark as Paid
                                </button>
                                <button class="btn btn-sm btn-danger" @onclick="() => ShowDeleteInvoiceModal(invoice.InvoiceId, invoice.Client?.Name)">
                                    <i class="bi bi-trash me-1"></i> Delete
                                </button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>

        <!-- Pagination Controls -->
        <nav aria-label="Invoice pagination" class="mt-3">
            <ul class="pagination justify-content-center">
                <li class="page-item @(CanGoPrevious ? "" : "disabled")">
                    <a class="page-link" href="javascript:void(0);" @onclick="PreviousPage">«</a>
                </li>
                @for (int i = 1; i <= TotalPages; i++)
                {
                    <li class="page-item @(i == CurrentPage ? "active" : "")">
                        <a class="page-link fw-bold" href="javascript:void(0);" @onclick="() => GoToPage(i)">@i</a>
                    </li>
                }
                <li class="page-item @(CanGoNext ? "" : "disabled")">
                    <a class="page-link" href="javascript:void(0);" @onclick="NextPage">»</a>
                </li>
            </ul>
        </nav>
    }
    else
    {
        <p class="text-center text-muted">No invoices found.</p>
    }
</div>
@if (isMarkAsPaidModalVisible)
{
    <div class="modal-overlay div-responsive">
        <div class="delete-modal">
            <p class="fw-bold text-center">
                Mark invoice for <span class="text-success">@modalClientName</span> as Paid?
            </p>

            <!-- Total Amount -->
            <div class="mb-3">
                <label class="form-label fw-bold">Total Amount:</label>
                <input type="number" class="form-control" value="@TotalAmount" disabled />
            </div>

            <!-- Paid Amount -->
            <div class="mb-3">
                <label class="form-label fw-bold">Paid Amount:</label>
                <input type="number" class="form-control" @bind="PaymentAmount" step="0.01" />
            </div>

            <!-- Remaining Amount (Auto-calculated) -->
            <div class="mb-3">
                <label class="form-label fw-bold">Remaining Amount:</label>
                <input type="number" class="form-control" value="@RemainingAmount" disabled />
            </div>

            <div class="d-flex justify-content-center gap-3">
                <button class="btn btn-warning d-flex align-items-center" @onclick="ConfirmMarkAsPaid">
                    <i class="bi bi-cash-stack me-1"></i> Yes, Mark as Paid
                </button>
                <button class="btn btn-secondary d-flex align-items-center" @onclick="CancelMarkAsPaid">
                    <i class="bi bi-x-circle me-1"></i> Cancel
                </button>
            </div>
        </div>
    </div>
}

<!-- Send Email Confirmation Modal -->
@if (isSendEmailModalVisible)
{
    <div class="modal-overlay">
        <div class="delete-modal">
            <p class="fw-bold">Are you sure you want to send an email to <span class="text-primary">@modalClientName</span>?</p>
            <div class="d-flex justify-content-center gap-3">
                <button class="btn btn-success" @onclick="ConfirmSendEmail">
                    <i class="bi bi-envelope-check me-1"></i> Yes, Send
                </button>
                <button class="btn btn-secondary" @onclick="CancelSendEmail">
                    <i class="bi bi-x-circle me-1"></i> Cancel
                </button>
            </div>
        </div>
    </div>
}

@* <!-- Mark as Paid Confirmation Modal --> *@
@* @if (isMarkAsPaidModalVisible) *@
@* { *@
@*     <div class="modal-overlay"> *@
@*         <div class="delete-modal"> *@
@*             <p class="fw-bold">Mark invoice for <span class="text-success">@modalClientName</span> as Paid?</p> *@
@*             <div class="d-flex justify-content-center gap-3"> *@
@*                 <button class="btn btn-warning" @onclick="ConfirmMarkAsPaid"> *@
@*                     <i class="bi bi-cash-stack me-1"></i> Yes, Mark as Paid *@
@*                 </button> *@
@*                 <button class="btn btn-secondary" @onclick="CancelMarkAsPaid"> *@
@*                     <i class="bi bi-x-circle me-1"></i> Cancel *@
@*                 </button> *@
@*             </div> *@
@*         </div> *@
@*     </div> *@
@* } *@

<!-- Delete Invoice Confirmation Modal -->
@if (isDeleteInvoiceModalVisible)
{
    <div class="modal-overlay">
        <div class="delete-modal">
            <p class="fw-bold">Are you sure you want to delete the invoice for <span class="text-danger">@modalClientName</span>?</p>
            <div class="d-flex justify-content-center gap-3">
                <button class="btn btn-danger" @onclick="ConfirmDeleteInvoice">
                    <i class="bi bi-trash me-1"></i> Yes, Delete
                </button>
                <button class="btn btn-secondary" @onclick="CancelDeleteInvoice">
                    <i class="bi bi-x-circle me-1"></i> Cancel
                </button>
            </div>
        </div>
    </div>
}

<style>
    .container {
        max-width: 1200px;
    }

    .table-responsive {
        overflow-x: auto;
        min-width: 100%;
        display: block;
        white-space: nowrap;
    }

    .div-responsive {
        max-width: calc(100vw - 350px);
    }

    th, td {
        min-width: 150px;
    }

        td.nowrap {
            white-space: nowrap;
        }

    .modal-overlay {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        display: flex;
        justify-content: center;
        align-items: center;
        background: rgba(0, 0, 0, 0.4);
        z-index: 1050;
    }

    .delete-modal {
        background: white;
        padding: 20px;
        border-radius: 8px;
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.2);
        text-align: center;
        max-width: 400px;
    }

    .btn-sm {
        min-width: 70px;
    }

    tbody td {
        text-align: center;
        vertical-align: middle;
    }

    thead th {
        text-align: center;
    }
</style>
@code {
    // Data lists and filter fields.
    private List<Client> Clients = new();
    private List<Invoice> Invoices = new();
    private List<Invoice> filteredInvoices = new();
    private List<Invoice> pagedInvoices = new();
    private List<Invoice> AllInvoices = new();
    private int SelectedClientId;
    private string SelectedStatus = "";
    private string SelectedEmailStatus = "";
    private string searchQuery = "";
    // private DateTime? StartDate { get; set; }
    // private DateTime? EndDate { get; set; }

    // Date range filtering.
    private DateTime StartDate { get; set; } = DateTime.UtcNow.AddMonths(-1);
    private DateTime EndDate { get; set; } = DateTime.UtcNow;
    // Assuming you have a control for CDatePicker (e.g., from your component library)
    private object datePickerControl = new object();
    private async Task OnStartDateChanged(DateTime newValue)
    {
        StartDate = newValue;
    }

    private async Task OnEndDateChanged(DateTime newValue)
    {
        EndDate = newValue;
    }

    // Pagination.
    private int CurrentPage = 1;
    private int PageSize = 5;
    private int TotalInvoices => filteredInvoices.Count;
    private int TotalPages => (int)Math.Ceiling((double)TotalInvoices / PageSize);
    private bool CanGoPrevious => CurrentPage > 1;
    private bool CanGoNext => CurrentPage < TotalPages;

    // Modal control fields.
    private bool isSendEmailModalVisible = false;
    private bool isMarkAsPaidModalVisible = false;
    private bool isDeleteInvoiceModalVisible = false;
    private int modalInvoiceId;
    private int modalClientId;
    private string modalClientName = "";
    private decimal TotalAmount { get; set; } = 0;  
    private decimal PaymentAmount { get; set; } = 0;
    private decimal RemainingAmount => TotalAmount - PaymentAmount;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            Clients = (await ClientRepo.GetAllAsync(true)).ToList();
            AllInvoices = (await InvoiceService.GetAllInvoicesAsync()).ToList();
            Invoices = new List<Invoice>(AllInvoices);
            FilterInvoices();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading invoices: {ex.Message}");
        }
    }

    private async Task GenerateInvoice()
    {
        try
        {
            if (SelectedClientId <= 0)
            {
                Console.WriteLine("Invalid Client ID");
                return;
            }

            // Check if an unpaid invoice exists.
            var existingInvoice = await InvoiceService.GetUnpaidInvoiceForClientAsync(SelectedClientId);
            if (existingInvoice != null)
            {
                decimal additionalAmount = await InvoiceService.CalculateAdditionalAmountAsync(SelectedClientId);
                existingInvoice.TotalAmount += additionalAmount;
                await InvoiceService.UpdateInvoiceAsync(existingInvoice);
                Console.WriteLine("Existing invoice updated with new resource consumption.");
            }
            else
            {
                await InvoiceService.CreateInvoiceAsync(SelectedClientId);
                Console.WriteLine("New invoice generated.");
            }

            // Refresh the invoice list.
            Invoices = (await InvoiceService.GetAllInvoicesAsync()).ToList();
            FilterInvoices();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error generating invoice: {ex.Message}");
        }
    }

    private async Task DownloadInvoice(int clientId)
    {
        try
        {
            if (clientId <= 0)
            {
                Console.WriteLine("Invalid Client ID");
                return;
            }
            // Pass the selected date range for PDF generation.
            byte[] pdfData = await InvoiceService.GenerateInvoicePdfAsync(clientId, StartDate, EndDate);
            var fileName = $"Invoice_{clientId}.pdf";
            await JS.InvokeVoidAsync("downloadFileFromStream", fileName, new DotNetStreamReference(new MemoryStream(pdfData)), "application/pdf");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error downloading invoice: {ex.Message}");
        }
    }

    private void ShowSendEmailModal(int clientId, string clientName)
    {
        modalClientId = clientId;
        modalClientName = clientName;
        isSendEmailModalVisible = true;
    }

    private void CancelSendEmail()
    {
        isSendEmailModalVisible = false;
    }

    private async Task ConfirmSendEmail()
    {
        try
        {
            // Define the date range for the invoice (you might want to use a UI-provided date range)
            DateTime startDate = new DateTime(DateTime.Now.Year, DateTime.Now.Month, 1); // Start of the month
            DateTime endDate = DateTime.Now; // Today's date

            bool emailSent = await InvoiceService.SendInvoiceToClientAsync(modalClientId, startDate, endDate);
            Console.WriteLine(emailSent ? "📧 Invoice email sent successfully." : "❌ Failed to send invoice email.");

            // Refresh invoice list
            Invoices = (await InvoiceService.GetAllInvoicesAsync()).ToList();
            FilterInvoices();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"❌ Error sending invoice: {ex.Message}");
        }
        finally
        {
            isSendEmailModalVisible = false;
        }
    }


    private void ShowMarkAsPaidModal(int invoiceId, string clientName)
    {
        var invoice = Invoices.FirstOrDefault(i => i.InvoiceId == invoiceId);
        if (invoice != null)
        {
            modalInvoiceId = invoice.InvoiceId;
            modalClientName = clientName;
            TotalAmount = invoice.TotalAmount;  // Ensure this is set
            PaymentAmount = invoice.PaidAmount; // Pre-fill with already paid amount
        }
        else
        {
            TotalAmount = 0;
            PaymentAmount = 0;
        }

        isMarkAsPaidModalVisible = true;
    }


    private void CancelMarkAsPaid()
    {
        isMarkAsPaidModalVisible = false;
    }

    private async Task ConfirmMarkAsPaid()
    {
        try
        {
            if (PaymentAmount <= 0)
            {
                Console.WriteLine("Invalid payment amount.");
                return;
            }
            await InvoiceService.MarkInvoiceAsPaidAsync(modalInvoiceId, PaymentAmount);
            Invoices = (await InvoiceService.GetAllInvoicesAsync()).ToList();
            FilterInvoices();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error marking invoice as paid: {ex.Message}");
        }
        finally
        {
            isMarkAsPaidModalVisible = false;
        }
    }

    private void ShowDeleteInvoiceModal(int invoiceId, string clientName)
    {
        modalInvoiceId = invoiceId;
        modalClientName = clientName;
        isDeleteInvoiceModalVisible = true;
    }

    private void CancelDeleteInvoice()
    {
        isDeleteInvoiceModalVisible = false;
    }

    private async Task ConfirmDeleteInvoice()
    {
        try
        {
            await InvoiceService.DeleteInvoiceAsync(modalInvoiceId);
            Invoices = (await InvoiceService.GetAllInvoicesAsync()).ToList();
            FilterInvoices();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error deleting invoice: {ex.Message}");
        }
        finally
        {
            isDeleteInvoiceModalVisible = false;
        }
    }

    private void LoadPagedInvoices()
    {
        pagedInvoices = filteredInvoices.Skip((CurrentPage - 1) * PageSize).Take(PageSize).ToList();
    }

    private void FilterInvoices()
    {
        if (string.IsNullOrWhiteSpace(searchQuery))
        {
            filteredInvoices = new List<Invoice>(Invoices);
        }
        else
        {
            filteredInvoices = Invoices
                .Where(i => (i.Client?.Name?.Contains(searchQuery, StringComparison.OrdinalIgnoreCase) ?? false) ||
                            i.InvoiceDate.ToShortDateString().Contains(searchQuery))
                .ToList();
        }
        CurrentPage = 1;
        LoadPagedInvoices();
    }

    private void NextPage() { if (CanGoNext) { CurrentPage++; LoadPagedInvoices(); } }
    private void PreviousPage() { if (CanGoPrevious) { CurrentPage--; LoadPagedInvoices(); } }
    private void GoToPage(int page) { if (page >= 1 && page <= TotalPages) { CurrentPage = page; LoadPagedInvoices(); } }

    // private int TotalInvoices => filteredInvoices.Count;
    // private int TotalPages => (int)Math.Ceiling((double)TotalInvoices / PageSize);
    // private bool CanGoPrevious => CurrentPage > 1;
    // private bool CanGoNext => CurrentPage < TotalPages;

    private async Task GetInvoiceByStatus(ChangeEventArgs e)
    {
        SelectedStatus = e.Value?.ToString();
        ApplyFilters();
    }

    private async Task GetInvoiceByEmailStatus(ChangeEventArgs e)
    {
        SelectedEmailStatus = e.Value?.ToString();
        ApplyFilters();
    }

    private void ApplyFilters()
    {
        bool? statusFilter = null;
        if (!string.IsNullOrEmpty(SelectedStatus) && bool.TryParse(SelectedStatus, out bool parsedStatus))
        {
            statusFilter = parsedStatus;
        }

        Invoices = AllInvoices
            .Where(i => (!statusFilter.HasValue || i.IsPaid == statusFilter.Value) &&
                        (string.IsNullOrEmpty(SelectedEmailStatus) || i.EmailStatus == SelectedEmailStatus))
            .ToList();

        FilterInvoices();
    }

}